package com.kh.chap05.model.vo;


/*
 * 인터페이스 표현법
 * 접근제한자 interface 인터페이스식별자 {}  <-  이런 형태로 쓰게 됨.
 * 
 * 구체 클래스, 추상 클래스, 인터페이스 는 서로 구별된다.
 * 
 * 앞의 둘과 다른 인터페이스의 특징 : 생성자를 가질 수 없다. 즉, 객체 생성이 불가능하다. 추상클래스보다 더욱 강한 규칙성, 강제성을 가진다. 인터페이스는 다중으로 구현할 수 있다.
 * 인터페이스에서 변수 등장하면 앞에 자동으로 public static final(상수필드) 의 코드가 붙는다. 추상클래스보터
 * static
 * 
 * 
 * 
 */


/*
 * 1. 추상클래스와 인터페이스의 공통점
 * - 객체 생성은 불가하지만 부모자료형의 참조타입으로는 사용이 가능함(다형성 적용 가능)
 * - 추상메소드를 가지고 있을 경우, 상속(구현)받는 클래스에서 추상메소드를 오버라이딩 하도록 강제함.
 * 
 * 2. 차이점 
 * - 추상클래스 : 멤버로 일반필드, 일반메소드를 가질 수 있음. 추상메소드는 있어도 그만 없어도 그만.
 * - 인터페이스 : 상수 필드, 특정한 경우를 제외하면 모든 메소드를 추상메소드로 정의해야 함.
 * 
 * 둘 다 다형성을 적용하여 외부에서 보여지는 타입의 용도로 사용하지만
 * - 추상클래스는 자식 클래스가 상속을 받아서 필드 / 메소드를 재사용하고 클래스를 확장하는 용도
 * - 인터페이스는 기능의 구현을 강제하기 위한 용도
 */
public interface MusicI { // 순수 자바 개발자들은 인터페이스 종류들 이름을 붙일 때 그것을 표시하기 위해 끝에 대문자 I를 붙이는 경향이 있다.
	
	/*public static final*/ int NUM = 1;
	
	// 또한 인터페이스의 메소드들은 기본적으로 추상메소드 취급이다.
	/*public abstract*/void play();
	void stop();
}
