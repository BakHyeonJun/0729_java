package com.kh.first;  //패키지 선언부 : 현재 클래스의 위치

	/*
	 * 주석 - 프로그램 실행에 아무런 영향을 끼치지 않음.
	 * 목적 - 코드 작성 후 작성한 코드를 이해하기 쉽도록 하기 위함. 달아놓으면 유지보수 시간을 줄일 수 있음.
	 * 종류(3가지)
	 * 1. 한 줄 주석(//) : 주석 내용이 한 줄일 때 사용. "//" 이후부터 행의 끝까지 모든 내용을 주석으로 간주.
	 * 2. 여러 줄 주석("/*  ~~~~  *") 여러 줄의 주석이 필요할 때 사용. " ~~~~ " 사이의 모든 내용이 주석으로 간주.
	 * 
	 */


	/*
	 * 패키지 : 하나의 패키지 안에 여러 개의 클래스들이 존재할 수 있음.
	 * 단, 하나의 패키지 안에 동일한 이름의 클래스는 존재할 수 없음.
	 * 
	 * 프로그램을 만들 때 모든 클래스들을 동일한 패키지에 생성하여 관리하면 복잡하기 때문에 클래스들을 용도에 맞게 구분해서 패키지에 보관하는 것을 권장한다.
	 * 
	 * 권장사항 : 패키지는 적어도 세 단계 이상으로 만들어주는 것을 권장함.
	 * 
	 * ex) com.kh.first
	 * 통상적으로 (com."회사명"."프로젝트명/팀명/카테고리명") 순으로 작성. 
	 * 
	 */

public class FirstClass {  // 클래스 이름을 FirstClass라고 지었다는 의미 {  <-scope->  }
	
	//scope(블록)란 중괄호로 묶은 부분을 이야기하며, 복합문을 구성하는 요소이다.
	//즉, 종속된 문장이 다수 개일 때, 중괄호로 시작하고 중괄호로 닫는다.
	
	//main method : 프로그램의 시작점, 프로그램 당 1개는 가지고 있어야 함.
	
	public static void  main(String [ ]  args) {
		
		// method : 하나의 기능 단위
		// 하나의 클래스 안에 여러 개의 메소드가 존재할 수 있음
		// 메소든 안의 구문을 수행하고 싶다면 반드시 "호출"해야 한다!
		
		// 공백문자는 빈 칸, 탭 문자, 빈 줄 등이 있으며, 이러한 공백문자들은 소스코드를 보기 좋게 하고 알아보기 쉽게 만드는 데 사용된다.
		// 즉, 프로그램을 구조화된 형태로 표현하는 데 유용하다. 
			System.out.println("Hello World!");    //출력문
			System.out.print("와 신난당 출력했땅");
			System.out.println("123123");
			System.out.println("123123");
			System.out.println("123123");
			
			
			//논리적인 한 문장이 끝날 때 반드시 세미콜론을 붙임!
			
			
			
			printMyName();
			
			System.out.print("당신의 이름은 무엇입니까? ");
			
			printMyName();
			
		}
	
	
	public static void    printMyName()    {  
		//안녕하세요. 제 이름은 xxx입니다. 반갑습니다.
		String MyName;
		MyName = "박 현준";
		
		System.out.print("안녕하세요. 제 이름은 "  +MyName+  "입니다. 반갑습니다. ");
		
	}
	
	

	
	
}